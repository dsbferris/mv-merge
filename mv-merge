#!/bin/bash

merge=0
force=0
compare=0
dry_run=0
rm_identical=0
copy_mode=0
interactive=0
preserve_times=0
show_summary=0

moved=0
copied=0
skipped=0
removed=0
compared=0
overwritten=0

args=()

# Parse flags
for arg in "$@"; do
    case "$arg" in
        -m|--merge) merge=1 ;;
        -f|--force) force=1 ;;
        -c|--compare-existing) compare=1 ;;
        -r|--rm-identical) rm_identical=1 ;;
        -n|--dry-run) dry_run=1 ;;
        -C|--copy) copy_mode=1 ;;
        -i|--interactive) interactive=1 ;;
        -t|--preserve-times) preserve_times=1 ;;
        --summary) show_summary=1 ;;
        *) args+=("$arg") ;;
    esac
done

if [[ "${#args[@]}" -lt 2 ]]; then
    echo "Usage: $0 [-m|--merge] [-f|--force] [-c|--compare-existing] [-r|--rm-identical] [-n|--dry-run] [-C|--copy] [-i|--interactive] [-t|--preserve-times] [--summary] <source>... <destination>"
    exit 1
fi

dst="${args[-1]}"
unset 'args[${#args[@]}-1]'

get_crc32() {
    cksum "$1" | awk '{print $1}'
}

compare_files() {
    src_file="$1"
    dst_file="$2"
    echo "==> Comparing:"
    echo "SRC: $src_file"
    echo "DST: $dst_file"
    echo "---"

    if [[ ! -e "$dst_file" ]]; then
        echo "Destination does not exist."
        return
    fi

    ((compared++))
    src_size=$(stat -c %s "$src_file")
    dst_size=$(stat -c %s "$dst_file")
    src_time=$(stat -c %y "$src_file")
    dst_time=$(stat -c %y "$dst_file")

    echo "SRC Size: $src_size bytes"
    echo "DST Size: $dst_size bytes"
    echo "SRC Time: $src_time"
    echo "DST Time: $dst_time"

    if [[ "$src_size" -ne "$dst_size" ]]; then
        echo "Files DIFFER (size mismatch)"
        echo
        return
    fi

    src_crc=$(get_crc32 "$src_file")
    dst_crc=$(get_crc32 "$dst_file")

    echo "SRC CRC32: $src_crc"
    echo "DST CRC32: $dst_crc"

    if [[ "$src_crc" == "$dst_crc" ]]; then
        echo "Files are IDENTICAL"
        if [[ "$rm_identical" -eq 1 ]]; then
            if [[ "$interactive" -eq 1 ]]; then
                read -p "Remove identical file $src_file? [y/N] " reply
                [[ "$reply" =~ ^[Yy]$ ]] || { echo "SKIPPED (user): $src_file"; ((skipped++)); return; }
            fi

            if [[ "$dry_run" -eq 1 ]]; then
                echo "WOULD REMOVE: $src_file"
            else
                rm -f "$src_file" && ((removed++))
                echo "REMOVED: $src_file"
                dir="$(dirname "$src_file")"
                while [[ "$dir" != "." && "$dir" != "/" ]]; do
                    rmdir "$dir" 2>/dev/null || break
                    dir="$(dirname "$dir")"
                done
            fi
        fi
    else
        echo "Files DIFFER (CRC mismatch)"
    fi
    echo
}

move_or_copy() {
    src="$1"
    dst="$2"

    if [[ "$interactive" -eq 1 && -e "$dst" && "$force" -eq 0 ]]; then
        read -p "Overwrite $dst? [y/N] " reply
        [[ "$reply" =~ ^[Yy]$ ]] || { echo "SKIPPED (user): $dst"; ((skipped++)); return; }
    fi

    if [[ "$dry_run" -eq 1 ]]; then
        echo "WOULD ${copy_mode:+COPY}${copy_mode:+"MOVE"}: $src -> $dst"
        return
    fi

    if [[ "$copy_mode" -eq 1 ]]; then
        cp -f "$src" "$dst" && ((copied++))
    else
        mv -f "$src" "$dst" && ((moved++))
    fi

    if [[ "$preserve_times" -eq 1 ]]; then
        touch -r "$src" "$dst"
    fi

    ((overwritten++))
    echo "MOVED: $src -> $dst"
}

# Default (non-merge)
if [[ "$merge" -eq 0 ]]; then
    for src in "${args[@]}"; do
        dst_file="$dst/$(basename "$src")"

        if [[ "$compare" -eq 1 ]]; then
            compare_files "$src" "$dst_file"
            continue
        fi

        if [[ -e "$dst_file" && "$force" -eq 0 ]]; then
            echo "SKIPPED (exists): $dst_file"
            ((skipped++))
            continue
        fi

        move_or_copy "$src" "$dst"
    done

    [[ "$show_summary" -eq 1 ]] && {
        echo "====== Summary ======"
        echo "Moved     : $moved"
        echo "Copied    : $copied"
        echo "Skipped   : $skipped"
        echo "Compared  : $compared"
        echo "Removed   : $removed"
        echo "Overwritten: $overwritten"
        echo "====================="
    }

    exit 0
fi

# Merge mode
for src in "${args[@]}"; do
    if [[ -d "$src" ]]; then
        base_name="$(basename "$src")"
        target_dir="$dst/$base_name"
        mkdir -p "$target_dir"

        find "$src" -type f | while read -r src_file; do
            rel_path="${src_file#$src/}"
            dst_file="$target_dir/$rel_path"
            dst_dir="$(dirname "$dst_file")"
            mkdir -p "$dst_dir"

            if [[ -e "$dst_file" ]]; then
                if [[ "$compare" -eq 1 ]]; then
                    compare_files "$src_file" "$dst_file"
                    continue
                fi

                if [[ "$force" -eq 1 || "$interactive" -eq 0 ]]; then
                    move_or_copy "$src_file" "$dst_file"
                else
                    read -p "Overwrite $dst_file? [y/N] " reply
                    [[ "$reply" =~ ^[Yy]$ ]] && move_or_copy "$src_file" "$dst_file" || {
                        echo "SKIPPED (user): $dst_file"
                        ((skipped++))
                    }
                fi
            else
                move_or_copy "$src_file" "$dst_file"
            fi
        done

        if [[ "$dry_run" -eq 0 ]]; then
            find "$src" -depth -type d -empty -delete
            rmdir "$src" 2>/dev/null
        fi
    else
        dst_file="$dst/$(basename "$src")"

        if [[ -e "$dst_file" ]]; then
            if [[ "$compare" -eq 1 ]]; then
                compare_files "$src" "$dst_file"
                continue
            fi

            if [[ "$force" -eq 0 ]]; then
                echo "SKIPPED (exists): $dst_file"
                ((skipped++))
                continue
            fi
        fi

        move_or_copy "$src" "$dst"
    fi
done

[[ "$show_summary" -eq 1 ]] && {
    echo "====== Summary ======"
    echo "Moved     : $moved"
    echo "Copied    : $copied"
    echo "Skipped   : $skipped"
    echo "Compared  : $compared"
    echo "Removed   : $removed"
    echo "Overwritten: $overwritten"
    echo "====================="
}

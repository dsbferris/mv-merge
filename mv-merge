#!/bin/bash
set -euo pipefail

# ============
# mv-merge.sh
# ============
# This script merges files or directories into a destination directory.
# Supports copying, comparison, interactive mode, force overwrite, dry run, and summary.

# ----------------------
# Default Option Settings
# ----------------------
force=0
compare=0
rm_identical=0
dry_run=0
copy_mode=0
interactive=0
preserve_times=0
show_summary=0

# ----------------
# Operation Counters
# ----------------
moved=0
copied=0
skipped=0
removed=0
compared=0
overwritten=0
had_error=0

args=()

# === Parse arguments ===
for arg in "$@"; do
    case "$arg" in
        -f|--force) force=1 ;;
        -c|--compare-existing) compare=1 ;;
        -r|--rm-identical) rm_identical=1 ;;
        -n|--dry-run) dry_run=1 ;;
        -C|--copy) copy_mode=1 ;;
        -i|--interactive) interactive=1 ;;
        -t|--preserve-times) preserve_times=1 ;;
        --summary) show_summary=1 ;;
        -v|--verbose) verbose=1 ;;
        *) args+=("$arg") ;;
    esac
done

if [[ "${#args[@]}" -lt 2 ]]; then
    echo "Usage: $0 [options] <source>... <destination>"
    echo "Options:"
    echo "  -f, --force             Overwrite existing files without prompt"
    echo "  -c, --compare-existing  Compare files before action (by size + CRC32)"
    echo "  -r, --rm-identical      Remove source if files are identical"
    echo "  -n, --dry-run           Don't perform any changes"
    echo "  -C, --copy              Copy instead of move"
    echo "  -i, --interactive       Prompt on existing destination file"
    echo "  -t, --preserve-times    Preserve modification times"
    echo "  --summary               Show summary after execution"
    echo "  -v, --verbose           Print detailed operations"
    exit 1
fi

# === Final Destination ===
dst="${args[-1]}"
unset 'args[${#args[@]}-1]'

# === Utility: CRC32 checksum ===
get_crc32() {
    cksum "$1" | awk '{print $1}'
}

# === File comparison ===
compare_files() {
    local src_file="$1"
    local dst_file="$2"

    if [[ "$verbose" -eq 1 ]]; then
        echo "==> Comparing:"
        echo "SRC: $src_file"
        echo "DST: $dst_file"
        echo "---"
    fi

    if [[ ! -e "$dst_file" ]]; then
        [[ "$verbose" -eq 1 ]] && echo "Destination does not exist."
        return
    fi

    ((compared++))
    local src_size dst_size src_time dst_time
    src_size=$(stat -c %s "$src_file")
    dst_size=$(stat -c %s "$dst_file")
    src_time=$(stat -c %y "$src_file")
    dst_time=$(stat -c %y "$dst_file")

    if [[ "$verbose" -eq 1 ]]; then
        echo "SRC Size: $src_size bytes"
        echo "DST Size: $dst_size bytes"
        echo "SRC Time: $src_time"
        echo "DST Time: $dst_time"
    fi

    if [[ "$src_size" -ne "$dst_size" ]]; then
        [[ "$verbose" -eq 1 ]] && echo "Files DIFFER (size mismatch)"
        return
    fi

    local src_crc dst_crc
    src_crc=$(get_crc32 "$src_file")
    dst_crc=$(get_crc32 "$dst_file")

    if [[ "$verbose" -eq 1 ]]; then
        echo "SRC CRC32: $src_crc"
        echo "DST CRC32: $dst_crc"
    fi

    if [[ "$src_crc" == "$dst_crc" ]]; then
        [[ "$verbose" -eq 1 ]] && echo "Files are IDENTICAL"
        if [[ "$rm_identical" -eq 1 ]]; then
            if [[ "$dry_run" -eq 1 ]]; then
                echo "WOULD REMOVE: $src_file"
            else
                if rm -f "$src_file"; then
                    ((removed++))
                    echo "REMOVED: $src_file"
                    # Remove empty parent directories
                    local dir
                    dir="$(dirname "$src_file")"
                    while [[ "$dir" != "." && "$dir" != "/" ]]; do
                        rmdir "$dir" 2>/dev/null || break
                        dir="$(dirname "$dir")"
                    done
                else
                    echo "ERROR: Failed to remove $src_file" >&2
                    ((had_error++))
                fi
            fi
        fi
    else
        [[ "$verbose" -eq 1 ]] && echo "Files DIFFER (CRC mismatch)"
    fi
}

# === File move/copy handler ===
move_or_copy() {
    local src="$1"
    local dst="$2"

    if [[ "$dry_run" -eq 1 ]]; then
        echo "WOULD ${copy_mode:+COPY}${copy_mode:+'MOVE'}: $src -> $dst"
        return 0
    fi

    if [[ "$copy_mode" -eq 1 ]]; then
        if cp -f "$src" "$dst"; then
            ((copied++))
        else
            echo "ERROR: Failed to copy $src" >&2
            ((had_error++))
            return 1
        fi
    else
        if mv -f "$src" "$dst"; then
            ((moved++))
        else
            echo "ERROR: Failed to move $src" >&2
            ((had_error++))
            return 1
        fi
    fi

    if [[ "$preserve_times" -eq 1 ]]; then
        touch -r "$src" "$dst" 2>/dev/null || true
    fi
    return 0
}

# === Central logic for handling each file ===
handle_file_move() {
    local src_file="$1"
    local dst_file="$2"

    mkdir -p "$(dirname "$dst_file")"

    if [[ -e "$dst_file" ]]; then
        [[ "$compare" -eq 1 ]] && compare_files "$src_file" "$dst_file"

        if [[ "$interactive" -eq 1 && "$force" -eq 0 ]]; then
            read -p "Overwrite $dst_file? [y/N] " reply
            [[ "$reply" =~ ^[Yy]$ ]] || { ((skipped++)); return; }
        elif [[ "$force" -eq 0 && "$interactive" -eq 0 ]]; then
            [[ "$verbose" -eq 1 ]] && echo "SKIPPED (no action): $dst_file"
            ((skipped++))
            return
        fi

        move_or_copy "$src_file" "$dst_file"
        ((overwritten++))
    else
        move_or_copy "$src_file" "$dst_file"
    fi
}

# === Main loop ===
for src in "${args[@]}"; do
    if [[ -d "$src" && -d "$dst" ]]; then
        # Directory → Directory merge
        find "$src" -type f | while read -r src_file; do
            rel_path="${src_file#$src/}"
            dst_file="$dst/$rel_path"
            handle_file_move "$src_file" "$dst_file"
        done

        # Only delete if not in dry-run
        if [[ "$dry_run" -eq 0 ]]; then
            find "$src" -depth -type d -empty -delete
            rmdir "$src" 2>/dev/null || true
        fi
    elif [[ -f "$src" ]]; then
        # File → File or File → Directory
        if [[ -d "$dst" ]]; then
            dst_file="$dst/$(basename "$src")"
        else
            dst_file="$dst"
        fi
        handle_file_move "$src" "$dst_file"
    else
        echo "SKIPPED (not file or dir): $src"
        ((skipped++))
    fi
done

# === Summary ===
if [[ "$show_summary" -eq 1 ]]; then
    echo "====== Summary ======"
    echo "Moved      : $moved"
    echo "Copied     : $copied"
    echo "Overwritten: $overwritten"
    echo "Removed    : $removed"
    echo "Skipped    : $skipped"
    echo "Compared   : $compared"
    echo "Errors     : $had_error"
    echo "====================="
fi

exit "$had_error"
